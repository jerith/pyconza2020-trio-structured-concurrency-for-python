* Exposition
  :PROPERTIES:
  :reveal_extra_attr: data-state="no-toc-progress" class="center"
  :html_headline_class: sectitle
  :END:
  {{{secname(About concurrency)}}}

** What is concurrency?

{{{BR}}}
{{{BR}}}

#+ATTR_REVEAL: :frag (strike fade-in)
- Threads! Promises! Mutexes! Deadlocks!
  {{{BR}}}{{{BR}}}
- Multiple independent flows of execution
  {{{BR}}}{{{BR}}}
- Communication between flows

#+BEGIN_NOTES
- T!P!M!D! are all common concurrency-related things.
- Communication isn't *technically* necessary for concurrency.
#+END_NOTES

** ~spawn~: ~goto~ for concurrency

#+ATTR_REVEAL: :code_attribs data-line-numbers="|3-8|10-13|"
#+INCLUDE: "../code/2_spawn.erl" src erlang

{{{BR}}}
(Don't worry too much about the syntax. Erlang is weird.)

#+BEGIN_NOTES
- Erlang: from the 80s.
- Golang even calls it ~go~.
#+END_NOTES

** asyncio calls it ~create_task~

#+ATTR_REVEAL: :code_attribs data-line-numbers="|3-6|8-13|" data-fragment-index=0
#+INCLUDE: "../code/2_asyncio.py" src python

#+BEGIN_NOTES
- Coroutines and tasks can be created anywhere and passed around.
- No link between spawned task and the code that spawned it.
#+END_NOTES

** Where do errors go?

#+ATTR_REVEAL: :code_attribs data-line-numbers="|8|9,11|10|"
#+INCLUDE: "../code/2_errors.py" src python

#+BEGIN_NOTES
- Exceptions in tasks get reraised by ~await~.
- Tasks that aren't awaited log errors in ~__del__~.
- Stack traces can be very confusing and misleading.
#+END_NOTES

** Structured concurrency

*Tasks spawned in a block must finish in that block*

{{{BR}}}

#+ATTR_REVEAL: :frag (fade-in)
- Execution flow that humans can reason about
  {{{BR}}}{{{BR}}}
- Nested contexts and task-local state
  {{{BR}}}{{{BR}}}
- Well-defined cancellation and error handling
  {{{BR}}}{{{BR}}}
- No orphaned tasks or missing results

#+BEGIN_NOTES
- Async code cannot escape caller's scope.
- Will explain more in the next section.
- Getting rid of spawn entirely will let us have some nice things.
- Unfortunately Python isn't quite there yet.
#+END_NOTES
