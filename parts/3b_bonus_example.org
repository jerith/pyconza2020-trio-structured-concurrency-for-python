** Bonus: echo server

#+ATTR_REVEAL: :code_attribs data-line-numbers="|7-10|14-15|6,11-12|"
#+INCLUDE: "../code/3_echo_server.py" src python

#+BEGIN_NOTES
- 7-10: Iterate over the network stream, echoing each block of data.
  - Iter ends when stream is closed.
- 14-15: Start an ~echo_server~ task for each connection.
- 6,11-12: Handle (normal) exceptions per-connection.
#+END_NOTES

** Bonus: echo client

#+ATTR_REVEAL: :code_attribs data-line-numbers="|4-8|10-14|18-22|" style="line-height: 1.0em"
#+INCLUDE: "../code/3_echo_client.py" src python

#+BEGIN_NOTES
- 4-8: Send task: sends data every second.
- 10-14: Receive task: prints any data received.
- 18-22: Opens a stream, starts concurrent send and receive tasks on it.
  - Stream context manager closes stream, like ~with file~ but async.
#+END_NOTES

** Bonus: Flow control

Why didn't we write the client like this?

#+ATTR_REVEAL: :code_attribs data-line-numbers="|5|4|"
#+INCLUDE: "../code/3_flow_client.py" src python

#+BEGIN_NOTES
- 5: ~receive_some~ may not receive all data.
  - Networks are complicated and horrible.
  - If this happens a lot, data can fill buffers, block sender, etc.
- 4: ~send_all~ may block.
  - While blocked, we don't receive.
  - Which can cause/exacerbate receive backlog.
- These two things can interact and lead to client/server deadlock.
- Not as much of a problem for server because it sends what it receives.
#+END_NOTES
